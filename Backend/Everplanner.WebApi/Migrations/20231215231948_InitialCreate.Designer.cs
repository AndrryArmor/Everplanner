// <auto-generated />
using Everplanner.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Everplanner.WebApi.Migrations
{
    [DbContext(typeof(EverplannerDbContext))]
    [Migration("20231215231948_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Everplanner.WebApi.Core.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Проєкт 1",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Everplanner.WebApi.Core.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Complexity = 5,
                            Name = "Завдання 1",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            Complexity = 10,
                            Name = "Завдання 2",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            Complexity = 2,
                            Name = "Завдання 3",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 4,
                            Complexity = 6,
                            Name = "Завдання 4",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 5,
                            Complexity = 8,
                            Name = "Завдання 5",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 6,
                            Complexity = 7,
                            Name = "Завдання 6",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 7,
                            Complexity = 1,
                            Name = "Завдання 7",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 8,
                            Complexity = 4,
                            Name = "Завдання 8",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 9,
                            Complexity = 2,
                            Name = "Завдання 9",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 10,
                            Complexity = 5,
                            Name = "Завдання 10",
                            ProjectId = 1
                        });
                });

            modelBuilder.Entity("Everplanner.WebApi.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "andrry1@gmail.com",
                            Name = "Ачілов Андрій",
                            Password = "password"
                        });
                });

            modelBuilder.Entity("Everplanner.WebApi.Core.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DevelopmentVelocity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Workers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DevelopmentVelocity = 15,
                            Name = "Співробітник 1",
                            ProjectId = 1,
                            Salary = 150
                        },
                        new
                        {
                            Id = 2,
                            DevelopmentVelocity = 10,
                            Name = "Співробітник 2",
                            ProjectId = 1,
                            Salary = 100
                        },
                        new
                        {
                            Id = 3,
                            DevelopmentVelocity = 3,
                            Name = "Співробітник 3",
                            ProjectId = 1,
                            Salary = 30
                        },
                        new
                        {
                            Id = 4,
                            DevelopmentVelocity = 2,
                            Name = "Співробітник 4",
                            ProjectId = 1,
                            Salary = 20
                        });
                });

            modelBuilder.Entity("ParentTask_ChildTask", b =>
                {
                    b.Property<int>("ParentTaskId")
                        .HasColumnType("int");

                    b.Property<int>("ChildTaskId")
                        .HasColumnType("int");

                    b.HasKey("ParentTaskId", "ChildTaskId");

                    b.HasIndex("ChildTaskId");

                    b.ToTable("ParentTask_ChildTask");

                    b.HasData(
                        new
                        {
                            ParentTaskId = 1,
                            ChildTaskId = 5
                        },
                        new
                        {
                            ParentTaskId = 1,
                            ChildTaskId = 6
                        },
                        new
                        {
                            ParentTaskId = 2,
                            ChildTaskId = 6
                        },
                        new
                        {
                            ParentTaskId = 3,
                            ChildTaskId = 6
                        },
                        new
                        {
                            ParentTaskId = 3,
                            ChildTaskId = 7
                        },
                        new
                        {
                            ParentTaskId = 4,
                            ChildTaskId = 7
                        },
                        new
                        {
                            ParentTaskId = 5,
                            ChildTaskId = 8
                        },
                        new
                        {
                            ParentTaskId = 6,
                            ChildTaskId = 9
                        },
                        new
                        {
                            ParentTaskId = 7,
                            ChildTaskId = 9
                        },
                        new
                        {
                            ParentTaskId = 8,
                            ChildTaskId = 10
                        },
                        new
                        {
                            ParentTaskId = 9,
                            ChildTaskId = 10
                        });
                });

            modelBuilder.Entity("TaskWorker", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("TaskId", "WorkerId");

                    b.HasIndex("WorkerId");

                    b.ToTable("TaskWorker");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            WorkerId = 1
                        },
                        new
                        {
                            TaskId = 1,
                            WorkerId = 2
                        },
                        new
                        {
                            TaskId = 1,
                            WorkerId = 3
                        },
                        new
                        {
                            TaskId = 1,
                            WorkerId = 4
                        },
                        new
                        {
                            TaskId = 2,
                            WorkerId = 1
                        },
                        new
                        {
                            TaskId = 2,
                            WorkerId = 2
                        },
                        new
                        {
                            TaskId = 2,
                            WorkerId = 3
                        },
                        new
                        {
                            TaskId = 2,
                            WorkerId = 4
                        },
                        new
                        {
                            TaskId = 3,
                            WorkerId = 1
                        },
                        new
                        {
                            TaskId = 3,
                            WorkerId = 2
                        },
                        new
                        {
                            TaskId = 3,
                            WorkerId = 3
                        },
                        new
                        {
                            TaskId = 3,
                            WorkerId = 4
                        },
                        new
                        {
                            TaskId = 4,
                            WorkerId = 1
                        },
                        new
                        {
                            TaskId = 4,
                            WorkerId = 2
                        },
                        new
                        {
                            TaskId = 4,
                            WorkerId = 3
                        },
                        new
                        {
                            TaskId = 4,
                            WorkerId = 4
                        },
                        new
                        {
                            TaskId = 5,
                            WorkerId = 1
                        },
                        new
                        {
                            TaskId = 5,
                            WorkerId = 2
                        },
                        new
                        {
                            TaskId = 5,
                            WorkerId = 3
                        },
                        new
                        {
                            TaskId = 5,
                            WorkerId = 4
                        },
                        new
                        {
                            TaskId = 6,
                            WorkerId = 1
                        },
                        new
                        {
                            TaskId = 6,
                            WorkerId = 2
                        },
                        new
                        {
                            TaskId = 6,
                            WorkerId = 3
                        },
                        new
                        {
                            TaskId = 6,
                            WorkerId = 4
                        },
                        new
                        {
                            TaskId = 7,
                            WorkerId = 1
                        },
                        new
                        {
                            TaskId = 7,
                            WorkerId = 2
                        },
                        new
                        {
                            TaskId = 7,
                            WorkerId = 3
                        },
                        new
                        {
                            TaskId = 7,
                            WorkerId = 4
                        },
                        new
                        {
                            TaskId = 8,
                            WorkerId = 1
                        },
                        new
                        {
                            TaskId = 8,
                            WorkerId = 2
                        },
                        new
                        {
                            TaskId = 8,
                            WorkerId = 3
                        },
                        new
                        {
                            TaskId = 8,
                            WorkerId = 4
                        },
                        new
                        {
                            TaskId = 9,
                            WorkerId = 1
                        },
                        new
                        {
                            TaskId = 9,
                            WorkerId = 2
                        },
                        new
                        {
                            TaskId = 9,
                            WorkerId = 3
                        },
                        new
                        {
                            TaskId = 9,
                            WorkerId = 4
                        },
                        new
                        {
                            TaskId = 10,
                            WorkerId = 1
                        },
                        new
                        {
                            TaskId = 10,
                            WorkerId = 2
                        },
                        new
                        {
                            TaskId = 10,
                            WorkerId = 3
                        },
                        new
                        {
                            TaskId = 10,
                            WorkerId = 4
                        });
                });

            modelBuilder.Entity("Everplanner.WebApi.Core.Project", b =>
                {
                    b.HasOne("Everplanner.WebApi.Core.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Everplanner.WebApi.Core.Task", b =>
                {
                    b.HasOne("Everplanner.WebApi.Core.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Everplanner.WebApi.Core.Worker", b =>
                {
                    b.HasOne("Everplanner.WebApi.Core.Project", "Project")
                        .WithMany("Workers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ParentTask_ChildTask", b =>
                {
                    b.HasOne("Everplanner.WebApi.Core.Task", null)
                        .WithMany()
                        .HasForeignKey("ChildTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Everplanner.WebApi.Core.Task", null)
                        .WithMany()
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskWorker", b =>
                {
                    b.HasOne("Everplanner.WebApi.Core.Task", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Everplanner.WebApi.Core.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Everplanner.WebApi.Core.Project", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("Everplanner.WebApi.Core.User", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
